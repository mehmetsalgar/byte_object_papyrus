/**MIT License
*
*Copyright (c) 2013-present, , GmbH.
*
*Permission is hereby granted, free of charge, to any person obtaining a copy
*of this software and associated documentation files (the "Software"), to deal
*in the Software without restriction, including without limitation the rights
*to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*copies of the Software, and to permit persons to whom the Software is
*furnished to do so, subject to the following conditions:
*
*The above copyright notice and this permission notice shall be included in all
*copies or substantial portions of the Software.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*SOFTWARE.
*/
extension org::fornax::cartridges::uml2::javabasic::m2t::Misc;
cached boolean byteObjectNullImplementation():
	isEmpty(readByteObjectNullImplementation()) || readByteObjectNullImplementation().toLowerCase() == "false" ? false:true;

private String readByteObjectNullImplementation():
	GLOBALVAR byte_object_null_implementation;

cached boolean synchronizedImplementation():
	isEmpty(readSynchronizedImplementation()) || readSynchronizedImplementation().toLowerCase() == "false" ? false:true;

private String readSynchronizedImplementation() :
	GLOBALVAR synchronized_implementation;

cached boolean streamImplementation():
    isEmpty(readStreamImplementation()) || readStreamImplementation().toLowerCase() == "false" ? false:true;

private String readStreamImplementation():
    GLOBALVAR stream_implementation;

cached boolean byteBufferImplementation():
    isEmpty(readByteBufferImplementation()) || readByteBufferImplementation().toLowerCase() == "false" ? false:true;

private String readByteBufferImplementation():
    GLOBALVAR bytebuffer_implementation;

cached String modelVersion():
    readModelVersion();

private String readModelVersion():
    GLOBALVAR model_version;

cached boolean versionEnabled():
    isEmpty(readVersionEnabled()) || readVersionEnabled().toLowerCase() == "false" ? false:true;

private String readVersionEnabled():
    GLOBALVAR version_enabled;